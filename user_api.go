package main

import (
	"context"
	"fmt"
	"strings"

	"vocal_training_bot/BotExt"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

var (
	userInlineMenus = BotExt.NewInlineMenus()
	userFSM         = BotExt.NewFiniteStateMachine(userInlineMenus)
)

const (
	WarmupPayloadChecker = "BuyWarmupGroup"
	PayloadSplit         = "|"
	PaymentErrorText     = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!"
)

func setupUserHandlers(b *tele.Bot) {
	SetupUserStates(userFSM)
	SetupUserMenuHandlers(b)
}

func OnUserInlineResult(c tele.Context) error {
	callback := c.Callback()
	triggeredData := strings.Split(callback.Data[1:len(callback.Data)], "|") // 1st - special callback symbol /f
	triggeredID := triggeredData[0]
	triggeredItem := triggeredData[1]

	switch triggeredItem {
	case WarmupGroupsMenu:
		BotExt.SetStateVar(c.Sender().ID, "selectedWarmupGroup", triggeredID)
		err := processWarmupGroup(c, triggeredID)
		if err != nil {
			logger.Error("OnUserInlineResult: WarmupGroupsMenu", zap.Error(err))
		}
	case WarmupsMenu:
		err := showWarmup(c, triggeredID)
		if err != nil {
			logger.Error("OnUserInlineResult: WarmupsMenu", zap.Error(err))
		}
	}
	return c.Respond()
}

func onUserStart(c tele.Context) error {
	return c.Reply("–ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!", MainUserMenu)
}

func onUnregisteredStart(c tele.Context) error {
	userFSM.Trigger(c, SurveySGStartSurveyReqName)
	return nil
}

/*
func onUserCheckout(c tele.Context) error {
	checkout := c.PreCheckoutQuery()

	userID := c.Sender().ID
	checkoutID := checkout.ID

	payloadData := strings.Split(checkout.Payload, PayloadSplit)
	if len(payloadData) != 2 {
		logger.Error("can't extract payloadData", zap.Int64("userID", userID),
			zap.String("checkoutID", checkoutID), zap.Strings("payload", payloadData))
		return c.Bot().Accept(checkout, PaymentErrorText)
	}
	if payloadData[0] != WarmupPayloadChecker {
		logger.Error("unknown payloadChecker", zap.Int64("userID", userID),
			zap.String("checkoutID", checkoutID), zap.Strings("payload", payloadData))
		return c.Bot().Accept(checkout, PaymentErrorText)
	}
	warmupGroupID := payloadData[1]
	priceWhenAcquired := strconv.Itoa(checkout.Total) + checkout.Currency

	var warmupGroupName string
	var dbPrice int
	err := DB.QueryRow(context.Background(), `
		SELECT group_name, price*100 FROM warmup_groups
		WHERE warmup_group_id = $1`, warmupGroupID).Scan(&warmupGroupName, &dbPrice)
	if err != nil {
		logger.Error("can't find warmup in db", zap.Int64("userID", userID), zap.String("warmupGroupID", warmupGroupID),
			zap.String("checkoutID", checkoutID))
		return c.Bot().Accept(checkout, PaymentErrorText)
	}

	if dbPrice != checkout.Total {
		logger.Error("price doesn't match", zap.Int64("userID", userID), zap.String("warmupGroupID", warmupGroupID),
			zap.String("checkoutID", checkoutID), zap.Strings("payload", payloadData),
			zap.Int("dbPrice", dbPrice), zap.Int("checkout.Total", checkout.Total),
		)
		return c.Bot().Accept(checkout, PaymentErrorText)
	}

	_, err = DB.Exec(context.Background(), `
		INSERT INTO acquired_warmup_groups(user_id, group_id, checkout_id, price_when_acquired)
		VALUES ($1, $2, $3, $4)`, userID, warmupGroupID, checkoutID, priceWhenAcquired)
	if err != nil {
		logger.Error("exec db error", zap.Int64("userID", userID), zap.String("warmupGroupID", warmupGroupID),
			zap.String("checkoutID", checkoutID), zap.Error(err))
		return c.Bot().Accept(checkout, PaymentErrorText)
	}

	_ = c.Send("–ü–∞–∫–µ—Ç —Ä–∞—Å–ø–µ–≤–æ–∫ '" + warmupGroupName + "' –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –º–µ–Ω—é –†–∞—Å–ø–µ–≤–∫–∏")
	logger.Info("successful payment", zap.Int64("userID", userID), zap.String("warmupGroupID", warmupGroupID),
		zap.String("price", priceWhenAcquired))
	return c.Bot().Accept(checkout)
}
*/

func onUnregisteredText(c tele.Context) error {
	if ok := BotExt.HasState(c.Sender().ID); ok {
		userFSM.Update(c)
		return nil
	}

	return c.Send(`–ü—Ä–∏–≤–µ—Ç ü§ç –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å!

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º—É–∑—ã–∫—É –∏ –ø–µ–Ω–∏–µ —á–∞—Å—Ç—å—é —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ ‚Äçüî•
–ë—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ —Ç–≤–æ—ë–º –≤–æ–∫–∞–ª—å–Ω–æ–º –ø—É—Ç–∏! ‚ù§

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å üëá
üì¢ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –≤–æ–∫–∞–ª–æ–º –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º
üéô–Ω–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
üé∂ –ª—É—á—à–∏–µ —Ä–∞—Å–ø–µ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
üëÇ–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—Ö–∞
üìö–ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –º—É–∑—ã–∫–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏
ü™© —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!!`)
}

func onUserText(c tele.Context) error {
	userID := c.Sender().ID

	if ok := BotExt.HasState(userID); ok {
		userFSM.Update(c)
		return nil
	}

	switch c.Text() {
	case "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
		_ = c.Send(`–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ä–∞—Å–ø–µ–≤–∫–∏ –∏
–ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ üôèü§ç

–ê –ø–æ–∫–∞ –ª–æ–≤–∏—Ç–µ —Ä–∞–∑–±–æ—Ä—ã –≤–æ–∫–∞–ª–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∑–≤—É—á–∞—Ç—å
—Ç–∞–∫ –∂–µ –∫—Ä—É—Ç–æ!üîÆ
–í–∞–∂–Ω–æ! –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ –∏ –º—ã—à–ª–µ–Ω–∏—è.
–†–∞–∑–±–æ—Ä—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è –¥–ª—è –≤–∞—Å —Å–æ–∑–¥–∞—é –∫–∞–∫ —Ä–∞–∑ –∏ –Ω–∞—Ü–µ–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ. –ù–æ –Ω–µ
–∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Å–µ–±–µ, –∏–∑—É—á–∞–π—Ç–µ —Å–≤–æ–π –≥–æ–ª–æ—Å.
–ö–∞–∫–∏–µ –ø—Ä–∏—ë–º—ã –Ω—Ä–∞–≤—è—Ç—Å—è –∏–º–µ–Ω–Ω–æ –≤–∞–º? –í –∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö –≤–∞—à –≥–æ–ª–æ—Å —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞
–º–∞–∫—Å–∏–º—É–º? –ß—Ç–æ –≤–∞–º –ü–†–ò–Ø–¢–ù–û –ø–µ—Ç—å? –ß—Ç–æ –¥–∞—ë—Ç –æ—â—É—â–µ–Ω–∏—è —Å–≤–æ–±–æ–¥—ã –∏ —Ä–æ–¥—Å—Ç–≤–∞? –ò—â–∏—Ç–µ
—Å–≤–æ—ë –∏ –ø—Ä–æ—Å—Ç–æ –±—É–¥—å—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ ü§ç
`)
		return userInlineMenus.Show(c, WarmupGroupsMenu)
	case "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
		return userInlineMenus.Show(c, WarmupNotificationsMenu)
	case "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫":
		userFSM.Trigger(c, WannabeStudentSGSendReq)
		return nil
	case "–û–±–æ –º–Ω–µ":
		return sendAboutMe(c)
	case "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞":
		return userInlineMenus.Show(c, AccountSettingsMenu)
	case "–°–¢–ê–¢–¨ –ê–î–ú–ò–ù–û–ú":
		userID := c.Sender().ID
		if (SupervisorID != 0) && (userID == SupervisorID) {
			_ = c.Send("/start")
			return SetUserGroup(userID, UGAdmin)
		}
	}
	return nil
}

func sendAboutMe(c tele.Context) error {
	err := c.Send("–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –º–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º\\!\\! [@vershkovaaa](https://instagram.com/vershkovaaa?igshid=YWJhMjlhZTc=)", tele.ModeMarkdownV2, tele.NoPreview)
	if err != nil {
		return err
	}
	err = c.Send("–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–µ–ª—é—Å—å –≤ —Å—Ç–æ—Ä–∏—Å –≤–∏–¥–æ—Å–∏–∫–∞–º–∏ —Å —É—Ä–æ–∫–æ–≤, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –≤–æ–∫–∞–ª–µ, –æ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ú–Ω–æ–≥–∏–µ –≥–æ–≤–æ—Ä–∏–ª–∏ –º–Ω–µ, —á—Ç–æ –ø–æ –º–æ–∏–º —Å—Ç–æ—Ä–∏—Å —É—á–∏–ª–∏—Å—å –ø–µ—Ç—å –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å)) –≤–µ–ª–∫–æ–º!!\U0001FAA9ü§ç")
	if err != nil {
		return err
	}
	err = c.Send("–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π —Ç–≥ –∫–∞–Ω–∞–ª https://t.me/juliavershkova")
	return err
}

func processWarmupGroup(c tele.Context, warmupGroupID string) error {
	var (
		acquired        bool
		price           int
		warmupGroupName string
	)
	err := DB.QueryRow(context.Background(), `
	SELECT COALESCE(acquired, false), price, group_name FROM warmup_groups
		LEFT JOIN (
			SELECT group_id, true AS acquired FROM acquired_warmup_groups 
			WHERE user_id = $1) AS acquired_warmups ON warmup_groups.warmup_group_id = acquired_warmups.group_id
	WHERE warmup_groups.warmup_group_id = $2`, c.Sender().ID, warmupGroupID).Scan(&acquired, &price, &warmupGroupName)
	if err != nil {
		return fmt.Errorf("processWarmupGroup: can't select row: %w", err)
	}

	if (price == 0) || acquired {
		err := userInlineMenus.Show(c, WarmupsMenu)
		if err != nil {
			return fmt.Errorf("processWarmups: SendMessageToUser: %w", err)
		}
		return c.Respond()
	}

	return c.Send("–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")
	/*
		invoice := &tele.Invoice{
			Title:       "–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–∞—Å–ø–µ–≤–æ–∫",
			Description: "–ü–∞–∫–µ—Ç —Ä–∞—Å–ø–µ–≤–æ–∫ '" + warmupGroupName + "'",
			Payload:     WarmupPayloadChecker + PayloadSplit + warmupGroupID,
			Currency:    "RUB",
			Prices: []tele.Price{
				{
					Label:  "RUB",
					Amount: price * 100,
				},
			},
			Token: ProviderToken,
		}
		return c.Send(invoice)
	*/
}

func showWarmup(c tele.Context, warmupID string) error {
	var recordID string
	userID := c.Sender().ID
	err := DB.QueryRow(context.Background(), `
		SELECT record_id FROM warmups
		/*INNER JOIN (
		    SELECT group_id FROM acquired_warmup_groups
		    WHERE user_id = $1
		) AS payment_check ON payment_check.group_id = warmups.warmup_group
		*/
		WHERE warmup_id = $1`, /*userID,*/ warmupID).Scan(&recordID)
	/*
		if err == pgx.ErrNoRows {
			return c.Send("‚òùÔ∏è–ê–π-—è–π-—è–π! –†–∞—Å–ø–µ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞... –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –≤—Ö–æ–¥–∏—Ç –≤ –ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫–µ—Ç!")
		}
	*/

	if err != nil {
		return fmt.Errorf("processWarmupGroup: can't select row: %w", err)
	}
	return SendMessageToUser(c.Bot(), userID, recordID, true)
}
