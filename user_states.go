package main

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"time"

	"vocal_training_bot/BotExt"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	tele "gopkg.in/telebot.v3"
)

const (
	SurveySGStartSurveyReqName = "SurveyStateGroup_StartSurveyReqName"
	// surveySGSetAge             = "SurveyStateGroup_SetAge"
	surveySGSetCity     = "SurveyStateGroup_SetCity"
	surveySGSetTimezone = "SurveyStateGroup_SetTimezone"
	// surveySGSetExperience      = "SurveyStateGroup_SetExperience"

	surveySGVarName = "Name"
	// surveySGVarAge         = "Age"
	surveySGVarCity = "City"
	// surveySGVarTimezoneRaw = "TimezoneRaw"
	// surveySGVarTimezoneStr = "TimezoneTxt"

	SettingsSGSetName = "SettingsStateGroup_SetName"
	//SettingsSGSetAge        = "SettingsStateGroup_SetAge"
	SettingsSGSetCity     = "SettingsStateGroup_SetCity"
	SettingsSGSetTimezone = "SettingsStateGroup_SetTimezone"
	// SettingsSGSetExperience = "SettingsStateGroup_SetExperience"

	NotificationSGSetTime = "NotificationStateGroup_SetTime"

	WannabeStudentSGSendReq = "WannabeStudentSG_SendReq"
)

func SetupUserStates(fsm *BotExt.FSM) {
	err := fsm.RegisterStateChain([]*BotExt.State{
		{
			Name: SurveySGStartSurveyReqName,
			OnTrigger: `–ü—Ä–∏–≤–µ—Ç ü§ç —Ä–∞–¥ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! –Ø - –≤–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –∏
–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ —Ç–≤–æ—ë–º –≤–æ–∫–∞–ª—å–Ω–æ–º –ø—É—Ç–∏!

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤‚Ä¶

(1/3) –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üë©‚Äçüé§
`,
			Validator:   nameValidator,
			Manipulator: nameSaver,
		},
		/*{
			Name:        surveySGSetAge,
			OnTrigger:   "(2/5) –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
			Validator:   ageValidator,
			Manipulator: ageSaver,
		},*/
		{
			Name:        surveySGSetCity,
			OnTrigger:   "(2/3) –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ü§ì –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",
			Validator:   cityValidator,
			Manipulator: citySaver,
		},
		{
			Name:        surveySGSetTimezone,
			OnTrigger:   "(3/3) –°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —Ç–≤–æ–∏–º —á–∞—Å–∞–º? –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 23:15. –≠—Ç–æ –Ω–∞–¥–æ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤ –∫–∞–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è.",
			Validator:   timeValidator,
			Manipulator: timezoneSaver,
			OnSuccess: `–°–ø–∞—Å–∏–±–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞ –∏ —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!
–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Ç—ã –Ω–∞–π–¥—ë—à—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–∞—Å–ø–µ–≤–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ü§ç
‚ö†Ô∏è –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É`,
			OnQuitExtra: []interface{}{MainUserMenu},
		},
		/*{
			Name:           surveySGSetExperience,
			OnTrigger:      "(5/5) –°–∫–æ–ª—å–∫–æ –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤–æ–∫–∞–ª–æ–º?",
			Validator:      experienceValidator,
			Manipulator:    saveSurveyRegisterUser,
			OnTriggerExtra: []interface{}{experienceReplyMenu},
			OnSuccess:      "–°–ø–∞—Å–∏–±–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞ –∏ —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!",
			OnQuitExtra:    []interface{}{MainUserMenu},
		},*/
	})
	if err != nil {
		panic(err)
	}

	err = fsm.RegisterOneShotState(&BotExt.State{
		Name:      SettingsSGSetName,
		OnTrigger: "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è",
		Validator: nameValidator,
		Manipulator: func(c tele.Context) (err error) {
			_, err = DB.Exec(context.Background(), `
				UPDATE users
				SET username = $1
				WHERE user_id = $2
				`, c.Text(), c.Sender().ID)
			return
		},
		OnSuccess: "–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ",
	})
	if err != nil {
		panic(err)
	}

	/* err = fsm.RegisterOneShotState(&BotExt.State{
		Name:      SettingsSGSetAge,
		OnTrigger: "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç",
		Validator: ageValidator,
		Manipulator: func(c tele.Context) (err error) {
			_, err = DB.Exec(context.Background(), `
				UPDATE users
				SET age = $1
				WHERE user_id = $2
				`, c.Text(), c.Sender().ID)
			return
		},
		OnSuccess: "–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω",
	})
	if err != nil {
		panic(err)
	}
	*/
	err = fsm.RegisterOneShotState(&BotExt.State{
		Name:      SettingsSGSetCity,
		OnTrigger: "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥",
		Validator: cityValidator,
		Manipulator: func(c tele.Context) (err error) {
			_, err = DB.Exec(context.Background(), `
				UPDATE users
				SET city = $1
				WHERE user_id = $2
				`, c.Text(), c.Sender().ID)
			return
		},
		OnSuccess: "–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω",
	})
	if err != nil {
		panic(err)
	}

	err = fsm.RegisterOneShotState(&BotExt.State{
		Name:      SettingsSGSetTimezone,
		OnTrigger: "–í–≤–µ–¥–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 12:15 –∏–ª–∏ 9:15)",
		Validator: timeValidator,
		Manipulator: func(c tele.Context) (err error) {
			userHoursMinutes := strings.Split(c.Text(), ":")
			userHours, _ := strconv.Atoi(userHoursMinutes[0])
			userMinutes, _ := strconv.Atoi(userHoursMinutes[1])
			utcTimezone, utcMinutesShift, err := calcTimezoneByTimeShift(userHours, userMinutes)
			_, err = DB.Exec(context.Background(), `
				UPDATE users
				SET timezone_txt = $1, timezone_raw = $2
				WHERE user_id = $3
				`, utcTimezone, utcMinutesShift, c.Sender().ID)
			if err != nil {
				return
			}
			return c.Send(fmt.Sprintf("–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - %s", utcTimezone))
		},
	})
	if err != nil {
		panic(err)
	}

	/*
		err = fsm.RegisterOneShotState(&BotExt.State{
			Name:           SettingsSGSetExperience,
			OnTrigger:      "–°–∫–æ–ª—å–∫–æ —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤–æ–∫–∞–ª–æ–º?",
			OnTriggerExtra: []interface{}{experienceReplyMenu},
			Validator:      experienceValidator,
			Manipulator: func(c tele.Context) (err error) {
				_, err = DB.Exec(context.Background(), `
					UPDATE users
					SET experience = $1
					WHERE user_id = $2
					`, c.Text(), c.Sender().ID)
				return
			},
			OnSuccess:   "–û–ø—ã—Ç –≤–æ–∫–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω",
			OnQuitExtra: []interface{}{MainUserMenu},
		})
		if err != nil {
			panic(err)
		}
	*/

	err = fsm.RegisterOneShotState(&BotExt.State{
		Name:      NotificationSGSetTime,
		OnTrigger: "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö. –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00",
		Validator: timeValidator,
		Manipulator: func(c tele.Context) error {
			userID := c.Sender().ID

			day, ok := BotExt.GetStateVar(userID, "day")
			if !ok {
				return fmt.Errorf("can't fetch variable 'day' from states table")
			}

			_, err := DB.Exec(context.Background(), `
			UPDATE warmup_notifications
			SET trigger_time = $1
			WHERE (user_id = $2) AND (day_of_week = $3)`, c.Message().Text, userID, day)
			if err != nil {
				return err
			}

			ts, err := getNearestNotificationFromPg(userID)
			if err != nil {
				return fmt.Errorf("state NotificationSGSetTime: getNearestNotificationFromPg: %w", err)
			}
			if err = notificationService.DelUser(userID); err != nil {
				return fmt.Errorf("state NotificationSGSetTime: DelUser: %w", err)
			}
			if err = notificationService.addUser(userID, ts); err != nil {
				return fmt.Errorf("state NotificationSGSetTime: addUser: %w", err)
			}

			return err
		},
		OnSuccess: "–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –Ω–∞ —Å–≤—è–∑–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è ü§ì",
	})
	if err != nil {
		panic(err)
	}

	err = fsm.RegisterOneShotState(&BotExt.State{
		Name: WannabeStudentSGSendReq,
		OnTrigger: `–Ø –ø—Ä–µ–ø–æ–¥–∞—é –≤–æ–∫–∞–ª –≤ –ú–æ—Å–∫–≤–µ –∏ –æ–Ω–ª–∞–π–Ω –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞

–í –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–∫–∞ –º—ã —É–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º—ã—à—Ü, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞, —Ç–µ–æ—Ä–∏–∏, –≤–æ–ø—Ä–æ—Å–∞–º, –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ ü§ì
–í–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–∫–∞ –º—ã –ø–æ–µ–º, –∫–∞–π—Ñ—É–µ–º, —Ä–∞–∑–±–∏—Ä–∞–µ–º –ø–µ—Å–Ω–∏, –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä—É–µ–º –∏ —Ç–≤–æ—Ä–∏–º –º—É–∑—ã–∫—É –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å ‚ú®üé∂ü§ç

–û–¥–µ–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è —É–¥–æ–±–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–ª–æ–º + –±–µ—Ä—ë–º —Å —Å–æ–±–æ–π
–±—É—Ç—ã–ª–æ—á–∫—É –≤–æ–¥—ã, –≥–æ—Ç–æ–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω, —Ç–µ–∫—Å—Ç—ã –∏, –∫–æ–Ω–µ—á–Ω–æ, open mind ü™êü§ç

üè¢ –ó–∞–Ω—è—Ç–∏–µ –≤ –ú–æ—Å–∫–≤–µ üè¢
–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –≤ –ú–æ—Å–∫–≤–µ: –ö—Ä–∞—Å–Ω—ã–π –û–∫—Ç—è–±—Ä—å, –ë–µ—Ä—Å–µ–Ω–µ–≤—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è 6 —Å2, we play music rooms
–£—Ä–æ–∫ –¥–ª–∏—Ç—Å—è 60 –º–∏–Ω

üíª –ó–∞–Ω—è—Ç–∏–µ –æ–Ω–ª–∞–π–Ω üíª
–£—Ä–æ–∫ –¥–ª–∏—Ç—Å—è 90 –º–∏–Ω. –í –æ–Ω–ª–∞–π–Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ–ª—å—à–µ, —á–µ–º –Ω–∞ —Å—Ç—É–¥–∏–∏ –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è + –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Å—è–∫–∏ —Å–≤—è–∑–∏. –°–æ–∑–≤–∞–Ω–∏–≤–∞–µ–º—Å—è –ø–æ —Ñ–µ–π—Å—Ç–∞–π–º/—Å–∫–∞–π–ø

üç® –¶–µ–Ω—ã üç®
2000—Ä - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
3000—Ä - —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
10000—Ä - –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è
*—Ü–µ–Ω—ã –Ω–∞ –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ! @vershkovaaa

üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã üéÅ

–î–µ–∫–∞–±—Ä—å - –≤—Ä–µ–º—è –º–∏–ª—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Ö –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –∏ –¥–∞—Ç—å –≤–æ–ª—à–µ–±–Ω—ã–π –ø–∏–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –∏–º –∑–∞–Ω—è—Ç–∏—è –≤–æ–∫–∞–ª–æ–º —Å–æ –º–Ω–æ–π ü§ç
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏—Ö –ø–æ–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–æ–¥ —ë–ª–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π –∫ –Ω–æ–≤–æ–º—É –≥–æ–¥—É üéÖ‚ù§Ô∏è
–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è: –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ—Ñ–ª–∞–π–Ω. –î–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–µ—Å—è—Ü–µ–≤.
`,
		// OnTriggerExtra: []interface{}{wannabeStudentMenu},
		//Validator:   wannabeStudentValidator,
		//Manipulator: wannabeStudentManipulator,
		//OnSuccess:   "–ì–æ—Ç–æ–≤–æ!",
		//OnQuitExtra: []interface{}{MainUserMenu},
	})
}

var (
	matchingPatternName = regexp.MustCompile("[–Å—ë–ê-—èA-Za-z ]{2,50}")
	matchingPatternCity = regexp.MustCompile("[–Å—ë–ê-—èA-Za-z ]{2,50}")
	matchingPatternTime = regexp.MustCompile("[0-9]?[0-9]:[0-9][0-9]")
)

func nameValidator(c tele.Context) string {
	name := strings.TrimSpace(c.Text())
	if ok := matchingPatternName.MatchString(name); !ok {
		return "–ò–º—è –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –±—ã—Ç—å 2 - 50 —Å–∏–º–≤–æ–ª–æ–≤"
	}
	return ""
}

/*
func ageValidator(c tele.Context) string {
	ageText := c.Text()
	age, err := strconv.Atoi(ageText)
	if err != nil {
		return "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ =)"
	}
	if age <= 0 {
		return "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ =)"
	}
	if age > 100 {
		return "–î–∞ —Ç—ã —Å–æ–≤—Å–µ–º –≤–∑—Ä–æ—Å–ª—ã–π! –î–∞–≤–∞–π –ø–æ-—á–µ—Å–Ω–æ–∫—É, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç?"
	}
	return ""
}
*/

func cityValidator(c tele.Context) string {
	city := strings.TrimSpace(c.Text())
	if ok := matchingPatternCity.MatchString(city); !ok {
		return "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
	}
	return ""
}

func timeValidator(c tele.Context) string {
	userTimeTxt := c.Text()
	errStr := "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 20:55"
	if ok := matchingPatternTime.MatchString(userTimeTxt); !ok {
		return errStr
	}
	userHoursMinutes := strings.Split(userTimeTxt, ":")
	if len(userHoursMinutes) != 2 {
		return errStr
	}

	// str -> int
	userHours, err := strconv.Atoi(userHoursMinutes[0])
	if err != nil {
		return errStr
	}
	userMinutes, err := strconv.Atoi(userHoursMinutes[1])
	if err != nil {
		return errStr
	}

	// post validation
	if userHours > 23 {
		errStr = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —á–∞—Å - 23. –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 20:55"
		return errStr
	}
	if userMinutes > 59 {
		errStr = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∏–Ω—É—Ç–∞ - 59. –ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 20:55"
		return errStr
	}
	return ""
}

/*
func experienceValidator(c tele.Context) string {
	xpVariant := strings.ToLower(strings.TrimSpace(c.Text()))
	if ok := slices.Contains(experienceAllowedAnswers, xpVariant); !ok {
		return "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"
	}
	return ""
}
*/

func nameSaver(c tele.Context) error {
	name := strings.TrimSpace(c.Text())
	name = cases.Title(language.Tag{}).String(name)
	BotExt.SetStateVar(c.Sender().ID, surveySGVarName, name)
	return nil
}

/*
func ageSaver(c tele.Context) error {
	age := c.Text()
	BotExt.SetStateVar(c.Sender().ID, surveySGVarAge, age)
	return nil
}
*/

func citySaver(c tele.Context) error {
	city := strings.TrimSpace(c.Text())
	city = cases.Title(language.Tag{}).String(city)
	BotExt.SetStateVar(c.Sender().ID, surveySGVarCity, city)
	return nil
}

func timezoneSaver(c tele.Context) error {
	userHoursMinutes := strings.Split(c.Text(), ":")
	userHours, _ := strconv.Atoi(userHoursMinutes[0])
	userMinutes, _ := strconv.Atoi(userHoursMinutes[1])
	utcTimezone, utcMinutesShift, err := calcTimezoneByTimeShift(userHours, userMinutes)
	if err != nil {
		return err
	}
	_ = c.Send(fmt.Sprintf("–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - %s", utcTimezone))

	userID := c.Sender().ID

	values := BotExt.GetStateVars(userID)
	name, _ := values[surveySGVarName]
	city, _ := values[surveySGVarCity]

	joinTime := time.Now().UTC()

	_, err = DB.Exec(context.Background(), `
				INSERT INTO users(user_id, username, city, timezone_raw, timezone_txt, join_dt)
				VALUES ($1, $2, $3, $4, $5, $6)
				`, userID, name, city, utcMinutesShift, utcTimezone, joinTime)
	if err != nil {
		return err
	}

	err = initUserDBs(c.Sender().ID)
	return err
}

func calcTimezoneByTimeShift(userHours, userMinutes int) (utcTimezone string, utcMinutesShift string, err error) {
	userMinutes = userMinutes + userHours*60

	utcTime := time.Now().UTC()
	utcMinutes := utcTime.Minute() + utcTime.Hour()*60

	deltaMinutes := userMinutes - utcMinutes
	// corner cases - on the day edge
	// e.g. UTC 22:30 27 jan; UTC+3 01:30 28 jan; delta 180, not -1260
	// e.g. UTC 01:00 27 jan; UTC-2 23:00 26 jan; delta -120, not 1320
	if deltaMinutes < -720 {
		deltaMinutes = 1440 + deltaMinutes
	}
	if deltaMinutes > 840 {
		deltaMinutes = deltaMinutes - 1440
	}

	deltaMinutesDur, err := time.ParseDuration(fmt.Sprintf("%dm", deltaMinutes))
	if err != nil {
		err = fmt.Errorf("calcTimezoneByTimeshift(%d, %d): %w", userHours, userMinutes, err)
		return
	}
	deltaMinutesDur = deltaMinutesDur.Round(30 * time.Minute)
	utcMinutesShift = strconv.Itoa(int(deltaMinutesDur.Minutes())) // save output

	// utcTimezone representation
	var offsetSign rune
	if deltaMinutesDur.Minutes() < 0 {
		offsetSign = '-'
	} else {
		offsetSign = '+'
	}

	deltaHoursFmt := deltaMinutesDur / time.Hour
	deltaMinutesDur -= deltaHoursFmt * time.Hour
	deltaMinutesFmt := deltaMinutesDur / time.Minute
	utcTimezone = fmt.Sprintf("UTC%c%02d:%02d", offsetSign, deltaHoursFmt.Abs(), deltaMinutesFmt.Abs())

	return
}

/*
func saveSurveyRegisterUser(c tele.Context) error {
	userID := c.Sender().ID

	xp := strings.ToLower(strings.TrimSpace(c.Text()))
	values := BotExt.GetStateVars(userID)
	name, _ := values[surveySGVarName]
	ageTxt, _ := values[surveySGVarAge]
	age, _ := strconv.Atoi(ageTxt)
	city, _ := values[surveySGVarCity]
	tzStr, _ := values[surveySGVarTimezoneStr]
	tzRawTxt, _ := values[surveySGVarTimezoneRaw]
	tzRaw, _ := strconv.Atoi(tzRawTxt)

	joinTime := time.Now().UTC()

	_, err := DB.Exec(context.Background(), `
				INSERT INTO users(user_id, username, age, city, timezone_raw, timezone_txt, experience, join_dt)
				VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
				`, userID, name, age, city, tzRaw, tzStr, xp, joinTime)
	if err != nil {
		return err
	}

	err = initUserDBs(c.Sender().ID)
	return err
}
*/

/*
func wannabeStudentValidator(c tele.Context) string {
	t := c.Text()
	if t == "" && c.Message().ReplyTo != nil {
		if c.Message().ReplyTo.Sender.ID != c.Bot().Me.ID {
			return "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∑–≤–æ–Ω–∏—Ç—å' —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
		}
		if c.Message().Contact != nil {
			return "" // handle contact
		}
	}
	if t == "–û—Ç–º–µ–Ω–∞" || t == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º" {
		return ""
	}
	return "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç... –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"
}

func wannabeStudentManipulator(c tele.Context) error {
	if c.Text() == "–û—Ç–º–µ–Ω–∞" {
		return nil
	}
	userID := c.Sender().ID
	phone := ""
	userName := c.Sender().Username

	if c.Text() != "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º" {
		phone = c.Message().Contact.PhoneNumber
	}

	var resolved bool
	err := DB.QueryRow(context.Background(), `
	SELECT resolved FROM wannabe_student
	WHERE user_id = $1`, userID).Scan(&resolved)
	if err != pgx.ErrNoRows {
		if resolved == true {
			_ = c.Send("–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –∏ –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏... –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä—è–º—É—é @vershkovaaa –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ")
			return nil
		}
		if resolved == false {
			_ = c.Send("–ó–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥–∞–Ω–∞, –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
			return nil
		}
		return err
	}

	_, err = DB.Exec(context.Background(), `
	INSERT INTO wannabe_student(user_id, user_name, phone_num)
	VALUES ($1, $2, $3)
	`, userID, userName, phone)
	return err
}
*/
